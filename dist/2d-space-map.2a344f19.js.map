{"version":3,"sources":["js/2d-space-map.js"],"names":["console","log","Vector","x","y","Planet","id","uuidv4","mass","velocity","color","fixed","fill","ellipse","radius","otherPlanet","scale","vector","distance","Math","sqrt","pow","acceleration","newVelocity","randomPlanet","planet","random","window","innerWidth","innerHeight","root","planets","setup","createCanvas","WEBGL","background","frameRate","noStroke","i","collide","planetA","planetB","biggerPlanet","smallerPlanet","collisionRadius","abs","draw","toDelete","Object","keys","forEach","render","otherID","applyForceFrom","destroyed","push","step"],"mappings":"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","file":"2d-space-map.2a344f19.js","sourceRoot":"..","sourcesContent":["console.log(\"Starting 2d-space-map\")\n\nclass Vector {\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n\nclass Planet {\n  constructor() {\n    this.id = uuidv4()\n    this.mass = 10\n    this.x = 0\n    this.y = 0\n    this.velocity = new Vector(0, 0)\n    this.color = color(255, 0, 0)\n    this.fixed = false\n  }\n\n  step() {\n    if (this.fixed) {\n      return\n    }\n\n    this.x += this.velocity.x\n    this.y += this.velocity.y\n  }\n\n  render() {\n    let { x, y, color } = this\n    fill(color)\n    ellipse(x, y, this.radius() * 2)\n  }\n\n  applyForceFrom(otherPlanet) {\n    if(this.fixed) {\n      return\n    }\n\n    let scale = 1000\n\n    let { x, y, mass, velocity } = this\n    let vector = new Vector((otherPlanet.x - x)*scale, (otherPlanet.y - y)*scale)\n    let distance = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2))\n    let force = otherPlanet.mass * mass / Math.pow(distance, 2)\n    let acceleration = force / mass\n    let newVelocity = new Vector(velocity.x + acceleration * vector.x, velocity.y + acceleration * vector.y)\n    this.velocity = newVelocity\n\n    // console.log(`force: ${force}`)\n    // console.log(`velocity: (${newVelocity.x},${newVelocity.y})`)\n  }\n\n  radius() {\n    return Math.sqrt(this.mass) / 50\n  }\n}\n\nfunction randomPlanet() {\n  let planet = new Planet()\n  let range = 200\n  planet.velocity = new Vector(random(-range, range) / 10, random(-range, range) / 10)\n  planet.x = random(- window.innerWidth / 2, window.innerWidth / 2)\n  planet.y = random(- window.innerHeight / 2, window.innerHeight / 2)\n  // let rangeB = 100\n  // planet.x = random(-rangeB, rangeB)\n  // planet.y = random(-rangeB, rangeB)\n  planet.mass = random(200, 2000)\n  planet.color = color(random(255), random(255), random(255))\n  return planet\n}\n\nvar planets = {}\nvar root\n\nfunction setup() {\n  createCanvas(window.innerWidth, window.innerHeight, WEBGL);\n  background(0);\n  frameRate(20)\n  noStroke()\n\n  // let planet = new Planet()\n  // planet.mass = 4000\n  // // planet.fixed = true\n  // planets[planet.id] = planet\n\n  for(let i = 0; i < 1000; i++) {\n    let planet = randomPlanet()\n    planets[planet.id] = planet\n  }\n}\n\n// Updates planet mass and returns planet to delete\nfunction collide(planetA, planetB) {\n  let biggerPlanet = planetA.radius() > planetB.radius() ? planetA : planetB\n  let smallerPlanet = planetA.radius() < planetB.radius() ? planetA : planetB\n  let collisionRadius = biggerPlanet.radius()\n  if (Math.abs(planetA.x - planetB.x) < collisionRadius &&\n      Math.abs(planetA.y - planetB.y) < collisionRadius) {\n    biggerPlanet.mass += smallerPlanet.mass\n    return smallerPlanet\n  }\n}\n\nfunction draw() {\n  background(0)\n\n  var toDelete = []\n  Object.keys(planets).forEach(id => {\n    let planet = planets[id]\n    planet.render()\n\n    Object.keys(planets).forEach(otherID => {\n      if (otherID != id) {\n        let otherPlanet = planets[otherID]\n        planet.applyForceFrom(otherPlanet)\n\n        let destroyed = collide(planet, otherPlanet)\n        if (destroyed != null) {\n          toDelete.push(destroyed)\n        }\n      }\n    })\n\n    planet.step()\n  })\n\n  toDelete.forEach(planet => delete planets[planet.id])\n\n  // F = GMm / r^2\n  // F = ma\n}"]}