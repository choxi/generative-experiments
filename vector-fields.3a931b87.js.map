{"version":3,"sources":["js/vector-fields.js"],"names":["console","log","Vector","vectors","x","y","VectorGrid","width","height","dimensions","grid","r","row","c","push","random","rows","length","columns","cellWidth","cellHeight","normX","normY","col","Math","floor","vector","error","fill","color","rect","endX","endY","line","ellipse","window","particles","static","Particle","size","velocity","setup","createCanvas","innerWidth","innerHeight","WEBGL","background","frameRate","noStroke","i","particle","draw","forEach","vectorAt","xRange","yRange","render","copy","shift"],"mappings":"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","file":"vector-fields.3a931b87.js","sourceRoot":"..","sourcesContent":["console.log(\"Starting vector-fields\")\n\nclass Vector {\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n\nclass VectorGrid {\n  constructor(width, height) {\n    let rows = 10\n    let columns = 10\n    let velocityRange = 2\n    this.dimensions = { width: width, height: height }\n\n    this.grid = []\n    for(let r = 0; r < rows; r++) {\n      let row = []\n\n      for(let c = 0; c < columns; c++) {\n        row.push(new Vector(random(-velocityRange, velocityRange), random(-velocityRange, velocityRange)))\n      }\n\n      this.grid.push(row)\n    }\n  }\n\n  vectorAt(x, y) {\n    let rows = this.grid.length\n    let columns = this.grid[0].length\n    let cellWidth = this.dimensions.width / columns\n    let cellHeight = this.dimensions.height / rows\n    let normX = x + this.dimensions.width / 2\n    let normY = y + this.dimensions.height / 2\n\n    var col = Math.floor(normX / cellWidth)\n    var row = Math.floor(normY / cellHeight)\n\n    if (row >= rows) {\n      row = rows - 1\n    }\n\n    if (col >= columns) {\n      col = columns - 1\n    }\n\n    try {\n      let vector = this.grid[row][col]\n      return vector\n    } catch(error) {\n      debugger\n      console.log(`Grid index out of bounds: (${x},${y}) - (${normX}, ${normY}) - (${col},${row})`)\n    }\n  }\n\n  render() {\n    let rows = this.grid.length\n    let columns = this.grid[0].length\n\n    let cellWidth = this.dimensions.width / columns\n    let cellHeight = this.dimensions.height / rows\n\n    fill(color(0, 255, 0))\n\n    for(let r = 0; r < this.grid.length; r++) {\n      for(let c = 0; c < this.grid[0].length; c++) {\n        let x = c*cellWidth - this.dimensions.width / 2\n        let y = r*cellHeight - this.dimensions.height / 2\n\n        rect(x, y, cellWidth, cellHeight)\n        let vector = this.grid[r][c]\n        let endX = x + vector.x / 2 + cellWidth / 2\n        let endY = y + vector.y / 2 + cellHeight / 2\n        line(x - vector.x / 2 + cellWidth / 2, y - vector.y / 2 + cellHeight / 2, endX, endY)\n        ellipse(endX, endY, 10)\n      }\n    }\n  }\n}\n\nvar vectors\nwindow.vectors = vectors\nvar particles = []\nvar static = []\n\nclass Particle {\n  constructor(x = 0, y = 0) {\n    this.x = x\n    this.y = y\n    this.size = 10\n    this.velocity = new Vector(0, 0)\n    // this.color = color(random(255), random(255), random(255), random(150, 255))\n    this.color = color(0, 0, random(255), random(150, 255))\n  }\n\n  render() {\n    fill(this.color)\n    ellipse(this.x, this.y, this.size)\n  }\n}\n\nfunction setup() {\n  createCanvas(window.innerWidth, window.innerHeight, WEBGL);\n  background(255);\n  vectors = new VectorGrid(window.innerWidth, window.innerHeight)\n  frameRate(30)\n  noStroke()\n\n  for(let i = 0; i < 1; i++) {\n    let particle = new Particle()\n    particle.x = random(- window.innerWidth / 2, window.innerWidth / 2)\n    particle.y = random(- window.innerHeight /2, window.innerHeight / 2)\n    particles.push(particle)\n  }\n}\n\nfunction draw() {\n  // vectors.render()\n  particles.forEach(particle => {\n    let vector = vectors.vectorAt(particle.x, particle.y)\n    particle.velocity.x += vector.x\n    particle.velocity.y += vector.y\n    particle.x += particle.velocity.x\n    particle.y += particle.velocity.y\n    let xRange = window.innerWidth / 2\n    let yRange = window.innerHeight / 2\n\n    if (particle.x < -xRange || particle.x > xRange) {\n      particle.x -= particle.velocity.x\n      particle.velocity.x = -particle.velocity.x\n    }\n\n    if (particle.y < -yRange || particle.y > yRange) {\n      particle.y -= particle.velocity.y\n      particle.velocity.y = -particle.velocity.y\n    }\n\n    particle.render()\n\n    let copy = new Particle()\n    copy.x = particle.x\n    copy.y = particle.y\n    copy.color = particle.color\n    static.push(copy)\n\n    if (static.length > 20) {\n      static.shift()\n    }\n  })\n\n  static.forEach(particle => particle.render())\n  // particles.push(new Particle())\n}"]}